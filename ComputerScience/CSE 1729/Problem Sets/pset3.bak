;1
;a
(define (harmonic n)
  (cond
    ((= n 1) 1)
    ((> n 1) (+ (/ 1 n) (harmonic (- n 1))))
    )
  )
(harmonic 10)
;b
(define (Eulerest n)
  (- (harmonic n) (log n)))
(Eulerest 100)

;2
;given
(define (prime? n)
  (define (divisor? k) (= 0 (modulo n k)))
  (define (divisors-upto k)
    (and (> k 1)
         (or (divisor? k) (divisors-upto (- k 1)))))
  (not (divisors-upto (- n 1))))
;count primes
(define (count-primes m)
  (define (cphelp m i)
    (cond
      ((= m 1) i)
      ((and (> m 1) (prime? m)) (cphelp (- m 1) (+ i 1)))
      (else (cphelp (- m 1) i))
      )
    )
  (cphelp m 0)
  )
(count-primes 10)

;3
;given
(define (rel-prime a b)
  (define (divides-both d)
    (and (= 0 (modulo a d))
         (= 0 (modulo b d))))
  (define (divisor-upto k)
    (and (> k 1)
         (or (divides-both k)
             (divisor-upto (- k 1)))))
  (not (divisor-upto (min a b))))
;count
(define (count-rel-prime n)
  (define (crphelp a b i)
    (cond
      ((< b 1) i)
      ((and (> b 1) (< a 1)) (crphelp (- b 1) (- b 1) i))
      ((and (> b 1) (> a 1)) (crphelp (- a 1) b i))
      )
    )
  (crphelp n n 0)
  )

;4
;a
(define (lucas n)
  (cond
    ((= n 0) 2)
    ((= n 1) 1)
    ((> n 1) (+ (lucas (- n 1)) (lucas (- n 2))))
    )
  )
(lucas 0)
(lucas 1)
(lucas 5)
;b
(define (Lucas-ratio n)
  (+ 0.0 (/ (lucas n) (lucas (- n 1))))
  )
(Lucas-ratio 20)
(Lucas-ratio 21)
(Lucas-ratio 22)

(define (fib n)
  (cond
    ((= n 0) 0)
    ((= n 1) 1)
    ((> n 1) (+ (fib (- n 1)) (fib (- n 2))))
    )
  )
(fib 3)
(fib 4)
(fib 5)