;1
(define (make-clock h m)
  (let ((mins (+ (* h 60) m)))
    (define (tick) (set! mins (+ mins 1)))
    (define (military) ((/ mins 60) ":" (modulo mins 60)))
    (define (time) (if (< mins 720)
                       ((/ mins 60) ":" (modulo mins 60) "AM")
                       ((/ (- mins 720) 60) ":" (modulo mins 60) "PM")))
    (define (dispatcher method)
      (cond ((eq? method 'get-time) time)
            ((eq? method 'get-mil) military)
            ((eq? method 'tick) tick)))
    dispatcher))
;2
(define (make-stack)
  (let ((S ' ()))
    (define (empty?) (null? S))
    (define (top) (car S))
    (define (pop) (let ((top (car S)))
                    (begin (set! S (cdr S))
                           top)))
    (define (push x) (set! S (cons x S)))
    (define (dispatcher method)
      (cond ((eq? method 'top) top)
            ((eq? method 'pop) pop)
            ((eq? method 'push) push)
            ((eq? method 'empty) empty?)))
    dispatcher))
;3
(define (eval-postfix p)
  (if (null? p)
      ("return stack?")
      (if (number? p)
          (push p)
          (cond ((eq? p #\*) "mult")
                ((eq? p #\/) "div")
                ((eq? p #\+) "add")
                ((eq? p #\-) "subtract")
                ((eq? p #\^) "expt")))
      )
  )
;4
