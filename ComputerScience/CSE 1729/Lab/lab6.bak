;1
;a
(define (list-at l i)
  (define (lahelp l n)
    (if (= n 0)
        (car l)
        (lahelp (cdr l) (- n 1))))
  (lahelp l i)
  )
;b
(define (selSort l)
  (define (smallest l)
    (define (smaller a b) (if (< a b) a b))
    (if (null? (cdr l))
        (car l)
        (smaller (car l) (smallest (cdr l)))))
  (define (remove v l)
    (if (null? l)
        l
        (if (equal? v (car l))
            (cdr l)
            (cons (car l) (remove v (cdr l))))))
  (if (null? l)
      '()
      (let* ((first (smallest l))
             (rest (remove first l)))
        (cons first (selSort r)))))

(define (list-median l)
  (let* ((sorted (selSort l)) (leng (length sorted)))
    (list-at sorted (floor (/ leng 2)))))
;2
;a
(define (explode x)
  (let* ((lnum (- x (* (floor (/ x 10)) 10))))
    (cond
      ((= 0 (/ x 10)) x)
      (else (cons lnum (explode (/ x 10))))
      )
    )
  )
(explode 451)
;b
(define (implode l)
  (define (imp-help l n)
    (if (null?)
        0
        (+ (* (list-at l n) (expt 10 n)) (imp-help l (+ n 1)))))
  (imp-help l 0)
  )
;c
(define (sum-list list)
  (if (null? list)
      0
      (+ (car list)
         (sum-list (cdr list)))))
(define (has-property x)
  (let* ((sum (sum-list (explode x))) (t2 (implode (reverse (explode sum)))))
    (if (= x (* sum t2))
        #t
        #f)))
;d
(define (find sequence test n)
  (cond
    ((= n 0) (car sequence))
    ((test sequence) (find (cdr sequence) test (- n 1)))
    (else (find (cdr sequence) test n)))
  )
;e
(define (fujiwara n)
  (find (lambda (x) x) (has-property x) n)
  )