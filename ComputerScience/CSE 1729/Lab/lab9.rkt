(define (fact n)
  (let ((i 1)
        (prod 1))
    (define (helper)
        (cond ((= i n) prod)
              ((= 0 n) 0)
              (else
               (set! i (+ i 1))
               (set! prod (* i prod))
               (helper))))
    (begin (helper)
           prod)))

(define (new-account initial-balance)
  (let ((balance initial-balance) (i .01))
    (define (deposit f)
       (set! balance (+ balance f))
        balance)
    (define (withdraw f)
      (cond ((> f balance)
             "Withdraw not allowed since balance is " balance)
            (else
               (set! balance (- balance f))
               balance)))
    (define (bal-inq) balance)
    (define (accrue)
        (set! balance (* balance (+ 1 i)))
        balance)
    (define (setrate x) (set! i x))
    (lambda (method)
      (cond ((eq? method 'deposit) deposit)
            ((eq? method 'withdraw) withdraw)
            ((eq? method 'accrue) accrue)
            ((eq? method 'setrate) setrate)
            ((eq? method 'balance-inquire) bal-inq)))))